image: python:3.10.4
stages:
  - test
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip

.disable_on_template: &disable_on_template
  rules:
    - if: '$CI_COMMIT_REF_NAME != "template"'

.django_before_script: &django_before_script |-
  pip install -r requirements.txt
  python manage.py collectstatic --no-input

.coverage_artifacts: &coverage_artifacts
  artifacts:
    paths:
      - .coverage*

UnitTest:
  <<: *disable_on_template
  <<: *coverage_artifacts
  stage: test
  before_script:
    - *django_before_script
  script:
    - coverage run --parallel --include="./*" --omit="manage.py,TK2Basdat12/*"
      manage.py test --exclude-tag=functional

FunctionalTest:
  <<: *disable_on_template
  <<: *coverage_artifacts
  stage: test
  before_script:
    - apt-get update -q && apt-get install -yq chromium-driver
    - *django_before_script
  script:
    - coverage run --parallel --include="./*" --omit="manage.py,TK2Basdat12/*"
      manage.py test --tag=functional


Coverage:
  <<: *disable_on_template
  stage: deploy
  before_script:
    - pip install coverage
    - coverage combine
  script:
    - coverage report -m
    - coverage html
  artifacts:
    paths:
      - htmlcov/

# Uncomment these lines if you would use tdd using selenium in your project
# UnitTest:
#   image: python:3.6
#   stage: test
#   before_script:
#     - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
#     - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list
#     - pip install -r requirements.txt
#     - python manage.py makemigrations
#     - python manage.py migrate
#     - apt-get update -qq && apt-get install -y -qq unzip
#     - apt-get install -y google-chrome-stable
#     - apt-get install -y xvfb
#     - wget https://chromedriver.storage.googleapis.com/2.32/chromedriver_linux64.zip
#     - unzip chromedriver_linux64.zip
#     - python manage.py collectstatic --no-input
#     - python manage.py runserver 8000 &
#   when: on_success
#   script:
#     - coverage run manage.py test
#     - coverage report -m

Deployment:
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
  image: ruby:2.7
  stage: deploy
  before_script:
    - gem install dpl
    - wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
  script:
    - dpl --provider=heroku --app=$HEROKU_APPNAME --api-key=$HEROKU_APIKEY
    - export HEROKU_API_KEY=$HEROKU_APIKEY
    - heroku run --app $HEROKU_APPNAME python manage.py migrate
  environment:
    name: production
    url: $HEROKU_APP_HOST
